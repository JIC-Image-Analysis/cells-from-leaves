function [] = cellLongAxisCorr7(orientation)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This script measures the angles between the cell long axis, proximodistal
% leaf axis and BASL orientation. It requires a folder of json files
% generated by Tjelvar, and an image of the leaf.
%
% The data written out and displayed is determined by threshold values
% applied to two pieces of data: cell eccentricity and the orientation of
% the cell relative to the leaf. Each threshold has two corresponding parameters:
% a lower and an upper bound. E.g. belowEccentricity = 1 and aboveEccentricity
% = 0 would select all data, as eccentricity lies in the range 0 to 1.
%
% Parameters can either be entered when calling this script in Matlab, e.g.
% cellLongAxisCorr7(false,1,0, 90, 0,true,120)
% or edited below where is says "Input Parameters"
%
% 3 files are written out: One csv containing all the data processed by
% this script. Another csv containing only the data that falls within the
% specified thresholds. Also a csv file in the same format as generated by
% Tjelvar's scripts, so that this data can be visualised using
% sampleArrows.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%% Parameter explanation %%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% showDebug
% true or false.
% For checking that BASL and cell long axis vectors are being calculated
% correctly for the rotated cells. Brings up a figure of each cell as it is
% being processed and requires any key to be pressed before continuing to
% the next cell. Very slow process, so just for checking.
%%%%%%%%%%%%%%%%
% showLeafFigs
% true or false.
% If true, two figure are created. One shows the BASL and cell long axis
% vectors for cells that satisify the threshold critera, the other shows
% the discarded data.
%%%%%%%%%%%%%%%%
% belowEccentricity
% Between 0 and 1.
% Upper bound threshold value for selecting cells based on their
% eccentricity. Used with aboveEccentricity parameter to determine the
% range used.
% Isotropic cells = 0, Anisotropic = 1;
%%%%%%%%%%%%%%%%
% aboveEccentricity
% Between 0 and 1.
% Lower bound threshold value for selecting cells based on their
% eccentricity. Used with belowEccentricity parameter to determine the
% range used.
%
% e.g. aboveEccentricity = 0.5 and belowEccentricity = 0.9, would select
% cells with eccentricity between 0.5 and 0.9, inclusive.
%%%%%%%%%%%%%%%%
% belowAngle
% Between 0 and 90
% Upper bound threshold value for selecting cells based on their
% orientation relative to the proximodistal axis. Used with
% aboveAngle parameter to determine the range used.
%%%%%%%%%%%%%%%%
% aboveAngle
% Between 0 and 90
% Lower bound threshold value for selecting cells based on their
% orientation relative to the proximodistal axis. Used with
% belowAngle parameter to determine the range used.
%
% e.g. aboveAngle = 45 and belowAngle = 90, would select cells
% oriented more than 45 degrees from the proximodistal axis.
%%%%%%%%%%%%%%%%%
% orientation
% PD axis orientation in degrees. Must be specified if entering
% parameters in the command window. If just calling the script without
% parameters, the orientation in degrees is determined from a PD line drawn
% by the user. The orientation is printed out at the end for future use. 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Input parameters
showDebug = false;
showLeafFigs = true;
belowEccentricity = 1;
aboveEccentricity = 0;
belowAngle = 90;
aboveAngle = 0;
if nargin == 0
    orientation = 0;
end

% Read in image of a leaf and a folder of .json files from Tjelvar
[leafImage, leafPath] = uigetfile({'*.png';'*.tif'},'Select a leaf image');
leafImg = imread(sprintf('%s%c%s',leafPath,filesep,leafImage));
dirOfCells = uigetdir('./','Select a directory of json files');
jsonFiles = dir(sprintf('%s%c*.json',dirOfCells,filesep));
% Get the user to specify the proximodistal axis
figure;
imshow(leafImg); hold on;

if nargin == 0
    % Get the user to draw a proximodistal line on the leaf
    lineH = imline;
    linePos = lineH.getPosition;
    lineVec = linePos(1,:) - linePos(2,:);
    orientation = rad2deg(cart2pol(lineVec(1)./norm(lineVec),lineVec(2)./norm(lineVec)) + pi + pi/2);
else
    [lineVec(1), lineVec(2)] = pol2cart(deg2rad(orientation)+pi/2,1);
end

data = -ones(length(jsonFiles),6);

% angleColours = jet(180);
% angleColours(181:360,:) = flipdim(angleColours(1:180,:),1);

totalCount = 0;

fid = fopen('cell_orientation_for_sampleArrows.csv','w');
fprintf(fid,'id, mx, my, cx, cy\n');

for i = 1:length(jsonFiles)
    jsonFilename = sprintf('%s%c%s',dirOfCells,filesep,jsonFiles(i).name)
    jsonObj = loadjson(jsonFilename);
    % if a json file (cell) has a tag field then it has a BASL signal
    if isfield(jsonObj,'tag')
        % Read in an image of the cell so that we can find the cell outline
        cellFilename = sprintf('%s%c%s-combined.png',dirOfCells,filesep,jsonFiles(i).name(1:end-5));
        cellImg = imread(cellFilename);
        rotatedImg = imrotate(cellImg,-jsonObj.rotation);
        test = im2bw(imfill(rotatedImg(:,:,3),'holes'));
        cellInfo = regionprops(test,'orientation','eccentricity','centroid','perimeter');
        % Sometimes finds the centroid crosshair as well as the cell outline.
        % Take the one with the larger perimeter
        if size(cellInfo,1) > 1
            perimeters = [cellInfo.Perimeter];
            [~, ID] = max(perimeters);
            cellInfo = cellInfo(ID);
        end
        
        % Rotate the cell centroid and BASL marker according to the
        % proximodistal axis specified earlier by the user
        [cartX, cartY] = pol2cart(deg2rad(cellInfo.Orientation),1);
        [cartX2, cartY2] = pol2cart(deg2rad(cellInfo.Orientation+180),1);
        markerX = jsonObj.normalised_marker_x_coord * size(cellImg,2);
        markerY = jsonObj.normalised_marker_y_coord * size(cellImg,1);
        R = [cos(deg2rad(-jsonObj.rotation)) -sin(deg2rad(-jsonObj.rotation)); sin(deg2rad(-jsonObj.rotation)) cos(deg2rad(-jsonObj.rotation))];
        centroid = [size(cellImg,2)/2 size(cellImg,1)/2];
        rotatedCentroid = [size(rotatedImg,2)/2 size(rotatedImg,1)/2];
        rotatedMarkers = rotatedCentroid + (([markerX markerY]-centroid)*R);
        
        a = [cartX, -cartY 0]; a = a./norm(a);
        aflip = [cartX2, -cartY2 0]; aflip = aflip./norm(aflip);
        b = [([rotatedMarkers(1) - cellInfo.Centroid(1), rotatedMarkers(2) - cellInfo.Centroid(2)])./norm(([rotatedMarkers(1) - cellInfo.Centroid(1), rotatedMarkers(2) - cellInfo.Centroid(2)])) 0];
        a2 = [lineVec./norm(lineVec) 0];
        
        dotProd = dot(a,b);
        baslToCellAngle1 = rad2deg(acos(dotProd));        
        dotProd = dot(aflip,b);
        baslToCellAngle2 = rad2deg(acos(dotProd));
        
        if baslToCellAngle1 < baslToCellAngle2
            crossProd = cross(a,b);
            dotProd = dot(a,b);
            baslToCellAngle = rad2deg(acos(dotProd));
            if crossProd(3) >= 0
                baslToCellAngle = -baslToCellAngle;
            end
        else
            crossProd = cross(aflip,b);
            dotProd = dot(aflip,b);
            baslToCellAngle = rad2deg(acos(dotProd));
            if crossProd(3) >= 0
                baslToCellAngle = -baslToCellAngle;
            end
        end
        
        crossProd = cross(b,a2);
        dotProd = dot(a2,b);
        baslToLeafAngle = rad2deg(acos(dotProd));
        if crossProd(3) < 0
            baslToLeafAngle = -baslToLeafAngle;
        end
        
        dotProd = dot(a,a2);
        cellToLeafAngle1 = rad2deg(acos(dotProd));        
        dotProd = dot(aflip,a2);
        cellToLeafAngle2 = rad2deg(acos(dotProd));
        
        if cellToLeafAngle1 < cellToLeafAngle2
            crossProd = cross(a,a2);
            dotProd = dot(a,a2);
            cellToLeafAngle = rad2deg(acos(dotProd));
            if crossProd(3) >= 0
                cellToLeafAngle = -cellToLeafAngle;
            end
        else
            crossProd = cross(aflip,a2);
            dotProd = dot(aflip,a2);
            cellToLeafAngle = rad2deg(acos(dotProd));
            if crossProd(3) >= 0
                cellToLeafAngle = -cellToLeafAngle;
            end
        end
        
        if showDebug
            if (belowEccentricity == 1 && aboveEccentricity == 0) || (cellInfo.Eccentricity <= belowEccentricity && cellInfo.Eccentricity >= aboveEccentricity)
            figure;
            imshow(rotatedImg); hold on;
            scatter(cellInfo.Centroid(1),cellInfo.Centroid(2),'blue')
            if baslToCellAngle1 < baslToCellAngle2
                line([cellInfo.Centroid(1) cellInfo.Centroid(1) + (100 * a(1))],[cellInfo.Centroid(2) cellInfo.Centroid(2) + (100 * a(2))],'color','cyan');
            else
                line([cellInfo.Centroid(1) cellInfo.Centroid(1) + (100 * aflip(1))],[cellInfo.Centroid(2) cellInfo.Centroid(2) + (100 * aflip(2))],'color','cyan');
            end
            line([cellInfo.Centroid(1) cellInfo.Centroid(1)  + (100 * b(1))],[cellInfo.Centroid(2) cellInfo.Centroid(2) + (100* b(2))],'color','green');
            line([cellInfo.Centroid(1) cellInfo.Centroid(1)  + (100 * c(1))],[cellInfo.Centroid(2) cellInfo.Centroid(2) + (100* c(2))],'color','red');
            sprintf('BASL to Cell Long Axis: %0.2f',baslToCellAngle)
            sprintf('BASL to Leaf: %0.2f',baslToLeafAngle)
            sprintf('Cell to Leaf: %0.2f',cellToLeafAngle)
            sprintf('Cell Orientation: %0.2f',cellInfo.Orientation)
            waitforbuttonpress
            close;
            end
        end
        
        if showLeafFigs
            if baslToCellAngle1 < baslToCellAngle2
                h(1) = line([jsonObj.centroid(2) jsonObj.centroid(2) + (25 * a(1))],[jsonObj.centroid(1) jsonObj.centroid(1) + (25 * a(2))],'color','cyan','LineWidth',2);
            else
                h(1) = line([jsonObj.centroid(2) jsonObj.centroid(2) + (25 * aflip(1))],[jsonObj.centroid(1) jsonObj.centroid(1) + (25 * aflip(2))],'color','cyan','LineWidth',2);
            end
            h(2) = line([jsonObj.centroid(2) jsonObj.centroid(2) + (rotatedMarkers(1) - cellInfo.Centroid(1))/2],[jsonObj.centroid(1) jsonObj.centroid(1) + (rotatedMarkers(2) - cellInfo.Centroid(2))/2],'color','green','LineWidth',2);
            
%             if cellToLeafAngle1 < cellToLeafAngle2
                fprintf(fid,'%d, %0.2f, %0.2f, %0.2f, %0.2f\n',i,jsonObj.centroid(2) + (25 * a(1)),jsonObj.centroid(1) + (25 * a(2)),jsonObj.centroid(2),jsonObj.centroid(1)); 
%             else
%                 fprintf(fid,'%d, %0.2f, %0.2f, %0.2f, %0.2f\n',i,jsonObj.centroid(2) + (25 * aflip(1)),jsonObj.centroid(1) + (25 * aflip(2)),jsonObj.centroid(2),jsonObj.centroid(1)); 
%             end
            if cellInfo.Eccentricity <= belowEccentricity && cellInfo.Eccentricity >= aboveEccentricity && abs(cellToLeafAngle) <= belowAngle && abs(cellToLeafAngle) >= aboveAngle && exist('h','var')
                set(h,'tag','selectedCells');
            else
                set(h,'tag','unselectedCells');
            end
        end
        
        data(i,1) = cellInfo.Eccentricity;
        data(i,2) = cellToLeafAngle;
        data(i,3) = baslToLeafAngle;
        data(i,4) = baslToCellAngle;
        data(i,5) = cellInfo.Perimeter;
        
        totalCount = totalCount + 1;
        
    else
        continue;
    end
end

fclose(fid);

%%%%%%%%%%%%
% Display data
%%%%%%%%%%%%

if showLeafFigs
    title(gca,'All data')
    fig=copyobj(gcf,0);
    fig2=copyobj(gcf,0);
    lineHs = findobj(fig,'tag','unselectedCells');
    figure(fig)
    title(gca,sprintf('Cell with isotropy <= %0.2f & >= %0.2f, angle from leaf <= %0.2f & >= %0.2f',belowEccentricity,aboveEccentricity, belowAngle, aboveAngle))
    delete(lineHs);
    figure(fig2)
    lineHs = findobj(fig2,'tag','selectedCells');
    delete(lineHs);
    title(gca,'Discarded cells')
end


if belowEccentricity == 1 && aboveEccentricity == 0 && aboveAngle == 0 && belowAngle == 90
    % Thresholds select all data so show histograms of all data
    figure
    hist(data(data(:,1)>-1,4),-90:90)
    title(sprintf('BASL to cell long axis'))
    figure
    hist(data(data(:,1)>-1,3),-180:180)
    title(sprintf('BASL to leaf'))
    figure
    hist(data(data(:,1)>-1,2),-90:90)
    title(sprintf('Cell to leaf'))
else
    % Show histograms of data selected by thresholds
    figure
    hist(data(data(:,1) >= aboveEccentricity & data(:,1)<=belowEccentricity & abs(data(:,2)) >= aboveAngle & abs(data(:,2))<=belowAngle,4),-90:90)
    title(sprintf('BASL to cell long axis for cells with isotropy <= %0.2f & >= %0.2f, angle from leaf <= %0.2f & >= %0.2f',belowEccentricity,aboveEccentricity, belowAngle, aboveAngle))
    figure
    hist(data(data(:,1) >= aboveEccentricity & data(:,1)<=belowEccentricity & abs(data(:,2)) >= aboveAngle & abs(data(:,2))<=belowAngle,3),-180:180)
    title(sprintf('BASL to leaf for cells with isotropy <= %0.2f & >= %0.2f, angle from leaf <= %0.2f & >= %0.2f',belowEccentricity,aboveEccentricity, belowAngle, aboveAngle))
    figure
    hist(data(data(:,1) >= aboveEccentricity & data(:,1)<=belowEccentricity & abs(data(:,2)) >= aboveAngle & abs(data(:,2))<=belowAngle,2),-90:90)
    title(sprintf('Cell to leaf for cells with isotropy <= %0.2f & >= %0.2f, angle from leaf <= %0.2f & >= %0.2f',belowEccentricity,aboveEccentricity, belowAngle, aboveAngle))
end
numInThresholdRange = sum(data(:,1) >= aboveEccentricity & data(:,1)<=belowEccentricity & abs(data(:,2)) >= aboveAngle & abs(data(:,2))<=belowAngle);
sprintf('# Within Threshold: %d, # Remaining: %d',numInThresholdRange,length(data(data(:,1)>-1,1))-numInThresholdRange)

%%%%%%%%%%%%
% Write out data
%%%%%%%%%%%%
idxs = find(data(:,1)>-1);
filename = inputdlg('Enter a filename');
% Write out all the data into a csv file
fid = fopen([filename{1},'.csv'],'w');
for i = 1:length(idxs)
fprintf(fid,'%0.2f, %0.2f, %0.2f, %0.2f, %0.2f, %s\n',data(idxs(i),1),data(idxs(i),2),data(idxs(i),3),data(idxs(i),4),data(idxs(i),5),jsonFiles(idxs(i)).name);
end
fclose(fid);
% Write out the thresholded data into a csv file
idxs = find(data(:,1) >= aboveEccentricity & data(:,1) <= belowEccentricity & abs(data(:,2)) >= aboveAngle & abs(data(:,2)) <= belowAngle);
fid = fopen([filename{1},sprintf('_isolow%0.2f_isoup%0.2f_toleaflow%0.2f_toleafup%0.2f.csv',belowEccentricity,aboveEccentricity,belowAngle,aboveAngle)],'w');
for i = 1:length(idxs)
fprintf(fid,'%0.2f, %0.2f, %0.2f, %0.2f, %0.2f, %s\n',data(idxs(i),1),data(idxs(i),2),data(idxs(i),3),data(idxs(i),4),data(idxs(i),5),jsonFiles(idxs(i)).name);
end
fclose(fid);

% Write out the thresholded data into a format readable by the sampleArrows
% script. Allows for better visualisation
fid = fopen([filename{1},sprintf('_isolow%0.2f_isoup%0.2f_toleaflow%0.2f_toleafup%0.2f_tensors.csv',belowEccentricity,aboveEccentricity,belowAngle,aboveAngle)],'w');
fprintf(fid,'id, mx, my, cx, cy\n');
for i = 1:length(idxs)
        jsonFilename = sprintf('%s%c%s',dirOfCells,filesep,jsonFiles(idxs(i)).name)    
        jsonObj = loadjson(jsonFilename);
        cellFilename = sprintf('%s%c%s-combined.png',dirOfCells,filesep,jsonFiles(idxs(i)).name(1:end-5));
        cellImg = imread(cellFilename);
        rotatedImg = imrotate(cellImg,-jsonObj.rotation);
        test = im2bw(imfill(rotatedImg(:,:,3),'holes'));
        cellInfo = regionprops(test,'orientation','eccentricity','centroid','perimeter');
        if size(cellInfo,1) > 1
            perimeters = [cellInfo.Perimeter];
            [~, ID] = max(perimeters);
            cellInfo = cellInfo(ID);
        end
        markerX = jsonObj.normalised_marker_x_coord * size(cellImg,2);
        markerY = jsonObj.normalised_marker_y_coord * size(cellImg,1);
        R = [cos(deg2rad(-jsonObj.rotation)) -sin(deg2rad(-jsonObj.rotation)); sin(deg2rad(-jsonObj.rotation)) cos(deg2rad(-jsonObj.rotation))];
        centroid = [size(cellImg,2)/2 size(cellImg,1)/2];
        rotatedCentroid = [size(rotatedImg,2)/2 size(rotatedImg,1)/2];
        rotatedMarkers = rotatedCentroid + (([markerX markerY]-centroid)*R); 
        fprintf(fid,'%d, %0.2f, %0.2f, %0.2f, %0.2f\n',i,jsonObj.centroid(2) + (rotatedMarkers(1) - cellInfo.Centroid(1))/2,jsonObj.centroid(1) + (rotatedMarkers(2) - cellInfo.Centroid(2))/2,jsonObj.centroid(2),jsonObj.centroid(1)); 
end
fclose(fid);

% Save input parameters to a similarly named file
fid = fopen(sprintf('%s_config.txt',filename{1}),'w');
fprintf(fid,'showDebug = %d\nshowLeafFigs = %d\nbelowEccentricity = %d\naboveEccentricity = %d\nbelowAngle = %d\naboveAngle = %d\norientation = %0.2f\n',...
    showDebug, showLeafFigs, belowEccentricity, aboveEccentricity, belowAngle, aboveAngle, orientation);
fclose(fid);

sprintf('Finished! PD orientation is %0.2f degrees',orientation)

end

